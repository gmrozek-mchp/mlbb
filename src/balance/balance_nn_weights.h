// ******************************************************************
// Neural Network Weights and Biases
// Generated from trained Keras model
// ******************************************************************

#ifndef NN_WEIGHTS_H
#define NN_WEIGHTS_H

#include <stdint.h>
#include <arm_math_types.h>

// Network Architecture
#define NN_INPUT_SIZE 6
#define NN_HIDDEN_SIZE 24
#define NN_OUTPUT_SIZE 3

// dense_input weights (6x6)
static const float INPUT_WEIGHTS[] = {
    -0.27927577f,    1.00532639f,    0.31633663f,    -1.24522293f,
    0.22285378f,    1.17816591f,    -0.03832454f,    -1.00635839f,
    -1.05737507f,    -1.01137066f,    1.34735811f,    -0.77064532f,
    -0.35705155f,    -0.44719490f,    -0.46185011f,    -0.29371974f,
    0.22655086f,    0.73163235f,    -0.18193507f,    0.35681424f,
    -0.48118654f,    0.04779806f,    -0.19614697f,    -0.28288794f,
    0.25511751f,    -0.31317547f,    -0.31509611f,    0.61865640f,
    -0.29495588f,    -0.90845782f,    0.40580723f,    0.48155266f,
    0.21228027f,    0.15555084f,    -0.93213952f,    0.33591360f

};

// dense_input bias (6)
static const float INPUT_BIAS[] = {
    0.00147440f,    -0.00096438f,    -0.00265235f,    -0.00016662f,
    -0.00013743f,    -0.00127782f
};

// dense_hidden weights (6x24)
static const float HIDDEN_WEIGHTS[] = {
    -0.28887266f,    0.19170201f,    0.11250711f,    -0.21142623f,
    0.12609826f,    -0.01858695f,    0.03402570f,    -0.02915001f,
    -0.00598748f,    0.05778130f,    0.18275964f,    0.00532238f,
    -0.01231979f,    -0.18913612f,    -0.46978855f,    -0.02782206f,
    0.03075801f,    0.23168954f,    0.03870139f,    0.13680661f,
    -0.26337692f,    0.07599902f,    0.03629860f,    0.14963722f,
    0.70596421f,    0.05011315f,    -0.07967131f,    -0.48360935f,
    -0.24758793f,    0.09854724f,    -0.23128048f,    0.03798191f,
    -0.25210318f,    -0.61498147f,    0.12680472f,    -0.67373061f,
    -0.04490425f,    -0.35231999f,    0.03143398f,    -0.27112752f,
    0.44004947f,    0.39624777f,    -0.01362083f,    0.37291536f,
    0.12537219f,    0.23273182f,    -0.14235777f,    0.13524455f,
    -0.07473496f,    0.14940670f,    -0.01892721f,    0.01551353f,
    -0.24956237f,    -0.15913552f,    -0.19936243f,    -0.13550104f,
    0.27058902f,    0.01009896f,    0.26676759f,    -0.57340854f,
    0.09168033f,    -0.15116175f,    -0.07432055f,    -0.17997622f,
    0.06234711f,    0.10906527f,    0.10074367f,    0.26891124f,
    0.15533569f,    0.07789324f,    -0.17957255f,    0.35303909f,
    -0.56742108f,    -0.11383732f,    0.13823055f,    -0.00351711f,
    0.29546872f,    0.18639401f,    0.24403247f,    -0.28186020f,
    -0.28847161f,    -0.15357019f,    -0.75499856f,    -0.48172250f,
    -0.09970764f,    0.03561519f,    -0.02054188f,    0.14908777f,
    -0.07695310f,    -0.41582933f,    0.70221275f,    -0.71634036f,
    0.05648886f,    0.01954884f,    0.18437228f,    -0.47177508f,
    0.27965236f,    0.08261131f,    0.35322005f,    0.10318119f,
    -0.64961165f,    0.17917474f,    0.17958885f,    -0.13555074f,
    -0.10542384f,    -0.38690916f,    -0.18620910f,    1.11531353f,
    -0.02383879f,    -0.43164730f,    -0.39499000f,    0.02044011f,
    -0.02073408f,    0.54459941f,    -0.43198040f,    0.60819483f,
    0.59732074f,    0.36332116f,    0.03911052f,    -0.03651711f,
    0.64752012f,    -0.03386257f,    0.08828440f,    -0.54519176f,
    -0.26423112f,    0.03970091f,    0.19539668f,    0.85064858f,
    -0.16153331f,    0.17909679f,    0.78104895f,    -0.74673706f,
    -0.09849929f,    0.11217297f,    -0.12135861f,    0.16324908f,
    -0.14179306f,    0.30994225f,    0.01989059f,    0.39326826f,
    -0.34132606f,    -0.01585036f,    0.19427148f,    0.13547562f

};

// dense_hidden bias (24)
static const float HIDDEN_BIAS[] = {
    -0.00113836f,    0.00089887f,    -0.00054551f,    0.00126306f,
    0.00255684f,    -0.00059618f,    -0.00159419f,    -0.00181988f,
    0.00174446f,    -0.00139763f,    -0.00145129f,    0.00075017f,
    0.00124137f,    -0.00070424f,    -0.00000682f,    -0.00146492f,
    0.00129465f,    -0.00159792f,    0.00042377f,    -0.00161204f,
    0.00037373f,    -0.00048647f,    -0.00197287f,    -0.00103811f

};

// dense_output weights (24x3)
static const float OUTPUT_WEIGHTS[] = {
    -0.01115315f,    -0.18006653f,    0.21592912f,    -0.00133603f,
    0.00163071f,    -0.00494961f,    -0.00182454f,    0.00445620f,
    -0.00005734f,    0.13839580f,    0.12200837f,    0.13893746f,
    0.07168259f,    0.08285154f,    0.08312536f,    0.00157647f,
    0.00126862f,    0.00278492f,    0.00014304f,    0.00141153f,
    0.00680116f,    -0.09504849f,    -0.11690171f,    -0.01084650f,
    -0.00136606f,    0.00989609f,    -0.00410169f,    -0.00094754f,
    -0.00499560f,    0.00813486f,    0.01539078f,    -0.08672780f,
    0.23256664f,    0.26252416f,    -0.26872432f,    -0.30746248f,
    0.00135316f,    0.00695364f,    -0.00132145f,    0.00170689f,
    -0.00205200f,    0.00768811f,    -0.01132083f,    -0.01486452f,
    -0.01186540f,    0.00172024f,    -0.00028866f,    0.00752737f,
    0.00071137f,    -0.00337069f,    -0.00681950f,    0.14329724f,
    0.05187938f,    0.23167944f,    -0.16431206f,    0.01022463f,
    -0.18626122f,    0.02923485f,    -0.06889080f,    0.10737285f,
    0.02890774f,    0.02817671f,    0.02301023f,    -0.02985922f,
    -0.02990794f,    -0.03995422f,    -0.00166472f,    -0.00494276f,
    0.00552017f,    -0.16453810f,    -0.16535789f,    -0.19224268f

};

// dense_output bias (3)
static const float OUTPUT_BIAS[] = {
    0.00032851f,    0.00151751f,    -0.00203314f
};

// Neural Network Functions
void nn_forward(const float* input, float* output);
float nn_relu(float x);

#endif // NN_WEIGHTS_H
