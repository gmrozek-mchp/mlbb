// ******************************************************************
// Neural Network Weights and Biases
// Generated from trained Keras model
// ******************************************************************

#ifndef NN_WEIGHTS_H
#define NN_WEIGHTS_H

#include <stdint.h>
#include <arm_math_types.h>

// Network Architecture
#define NN_INPUT_SIZE 6
#define NN_HIDDEN_SIZE 24
#define NN_OUTPUT_SIZE 3

// dense_input weights (6x6)
static const float INPUT_WEIGHTS[] = {
    -0.36426502f,    -0.69645357f,    1.19047236f,    0.13177598f,
    0.47472703f,    -0.87726241f,    0.52897936f,    -0.26419574f,
    -0.26233628f,    -1.07802534f,    1.00322449f,    0.41657040f,
    -0.85163522f,    -0.08862418f,    0.85191423f,    -0.40816528f,
    -0.81207967f,    0.36614761f,    1.02331722f,    0.94082671f,
    -0.36331856f,    0.16101089f,    0.02400955f,    0.46694201f,
    -0.23545177f,    -1.17756259f,    0.40953279f,    -1.01306486f,
    -1.24815154f,    0.00447904f,    0.63788742f,    0.71935290f,
    0.18925706f,    0.94455028f,    0.55126405f,    -0.31988660f

};

// dense_input bias (6)
static const float INPUT_BIAS[] = {
    -0.05448147f,    0.03987397f,    -0.00684920f,    -0.02076333f,
    -0.00798499f,    0.00390434f
};

// dense_hidden weights (6x24)
static const float HIDDEN_WEIGHTS[] = {
    0.70407277f,    -0.37196758f,    1.07178712f,    0.09045590f,
    0.86777729f,    -0.13498031f,    0.15290456f,    -0.31123391f,
    -0.00519333f,    0.33945331f,    -0.05424187f,    -0.07400120f,
    -0.08902799f,    -0.21211420f,    -0.21955720f,    0.50098836f,
    -0.09867171f,    -0.00664335f,    0.10042417f,    0.23219523f,
    -0.16784722f,    0.02596775f,    -0.20619924f,    0.11081792f,
    0.21729024f,    -1.06140220f,    0.41178542f,    0.42441505f,
    0.55186057f,    -0.08370773f,    -0.77604890f,    0.17868023f,
    0.02824737f,    -0.03780364f,    -0.11283403f,    -0.39776587f,
    -0.14077644f,    -0.23181024f,    -0.51937014f,    -0.17935511f,
    0.42100883f,    0.15758474f,    -0.47272065f,    -0.07964334f,
    -0.19968571f,    0.15594488f,    -0.83325052f,    0.02282290f,
    -0.57307279f,    0.28312206f,    0.11831612f,    -0.13178891f,
    -0.13071415f,    -0.50885564f,    0.04796084f,    -0.16322385f,
    -0.11597374f,    0.35587540f,    0.08131202f,    -0.25051802f,
    0.25312623f,    0.36696115f,    0.59107149f,    0.42876643f,
    0.26671645f,    -0.47115734f,    -0.41190857f,    0.02522931f,
    0.26735237f,    0.42202094f,    0.63892061f,    0.29220751f,
    0.63822091f,    -0.03193064f,    0.43588272f,    -0.23132440f,
    0.28639695f,    -0.51172543f,    -0.08668533f,    0.18860856f,
    0.33631891f,    0.32515821f,    -0.53684801f,    -0.63794667f,
    -0.30664384f,    0.25652033f,    -0.64022559f,    -0.39948189f,
    0.04694935f,    -0.47649539f,    -0.66785544f,    -0.37366042f,
    0.24626051f,    0.73593360f,    -0.42207727f,    0.13360351f,
    0.62040329f,    -0.45944402f,    0.66114199f,    -0.72062689f,
    0.52734786f,    0.00975852f,    -0.71924788f,    -0.12610953f,
    -0.20338209f,    0.24137869f,    0.28457540f,    0.34077901f,
    0.19736114f,    0.17835435f,    -0.09261417f,    0.30338672f,
    0.68875939f,    -0.52487695f,    0.08945712f,    -0.16772312f,
    0.19720784f,    -0.21275549f,    -0.30995601f,    -0.22721618f,
    0.07176426f,    -0.05945591f,    0.36025810f,    0.56734622f,
    -0.16122036f,    0.52470112f,    -0.40559384f,    0.35564944f,
    0.35733908f,    -0.39443389f,    0.46034324f,    0.54529822f,
    -0.83602148f,    0.31493127f,    0.10472257f,    0.72034204f,
    -0.02539003f,    0.33455268f,    0.55406660f,    0.36707491f,
    0.16014579f,    0.09075988f,    -0.58091539f,    -0.28005436f

};

// dense_hidden bias (24)
static const float HIDDEN_BIAS[] = {
    -0.14613894f,    -0.10605368f,    -0.13405193f,    -0.01795269f,
    -0.10649765f,    -0.01312158f,    -0.04402637f,    -0.05967159f,
    -0.05492209f,    -0.02567127f,    0.01733183f,    0.01134734f,
    0.01553154f,    -0.04842577f,    -0.05579319f,    0.00216934f,
    0.02235930f,    -0.01225140f,    0.01686173f,    -0.05863126f,
    -0.06233077f,    0.01762025f,    -0.14594333f,    -0.05657373f

};

// dense_output weights (24x3)
static const float OUTPUT_WEIGHTS[] = {
    -0.77563596f,    0.82782149f,    -0.30344048f,    -0.56433129f,
    -0.11775491f,    0.85735148f,    0.69397247f,    -0.27529812f,
    -0.69785035f,    -0.15127163f,    0.22057734f,    -0.23631744f,
    0.73352551f,    0.49384516f,    -0.90736675f,    0.26179588f,
    -0.09775529f,    -0.34385896f,    -0.48323289f,    0.02242334f,
    0.10396728f,    0.29256392f,    -0.24859448f,    -0.00371905f,
    -0.02223705f,    -0.29963952f,    -0.14350557f,    -0.13869289f,
    0.45031703f,    -0.42972735f,    0.31412196f,    -0.34041291f,
    -0.37847316f,    0.41633558f,    0.06674051f,    -0.12042641f,
    0.05852740f,    -0.14919175f,    0.07756102f,    -0.23168093f,
    0.41687012f,    -0.22483717f,    -0.05267369f,    0.52796829f,
    -0.38714781f,    -0.11977462f,    -0.46056584f,    0.53732985f,
    -0.09580830f,    -0.28606275f,    0.40558517f,    0.06281065f,
    0.24575004f,    -0.30836824f,    0.43972138f,    0.16587399f,
    -0.17691681f,    -0.31856596f,    0.29062542f,    -0.39145225f,
    -0.27643663f,    0.23825480f,    -0.39362037f,    -0.51636386f,
    0.35954425f,    0.56974518f,    0.73451805f,    -1.33904326f,
    0.56928819f,    0.19572328f,    0.22641437f,    0.20824976f

};

// dense_output bias (3)
static const float OUTPUT_BIAS[] = {
    -0.00952830f,    0.00881792f,    0.00002141f
};

// Neural Network Functions
void nn_forward(const float* input, float* output);
float nn_relu(float x);

#endif // NN_WEIGHTS_H
