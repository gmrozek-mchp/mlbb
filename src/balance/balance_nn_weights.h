// ******************************************************************
// Neural Network Weights and Biases
// Generated from trained Keras model
// ******************************************************************

#ifndef NN_WEIGHTS_H
#define NN_WEIGHTS_H

#include <stdint.h>
#include <arm_math_types.h>

// Network Architecture
#define NN_INPUT_SIZE 6
#define NN_HIDDEN_SIZE 24
#define NN_OUTPUT_SIZE 3

// dense_input weights (6x6)
static const float INPUT_WEIGHTS[] = {
    1.24869084f,    -1.45498359f,    0.32555467f,    1.55660105f,
    -0.09316767f,    0.24457052f,    0.97129208f,    0.95210087f,
    -1.11653996f,    -0.37529820f,    0.80828351f,    0.48990592f,
    0.83675504f,    -0.38458189f,    -0.15294765f,    0.07392948f,
    0.40187448f,    1.13099027f,    -0.09963869f,    0.72185761f,
    -0.34017015f,    -0.33501539f,    -0.90398055f,    0.54744583f,
    0.36807466f,    1.38028800f,    0.92383003f,    1.04598844f,
    0.65932673f,    1.61809278f,    1.24438512f,    -0.58214849f,
    -0.55006081f,    -0.74204022f,    -1.82783997f,    0.60259646f

};

// dense_input bias (6)
static const float INPUT_BIAS[] = {
    -0.01290578f,    0.02847779f,    0.00460598f,    -0.07083260f,
    -0.00824176f,    -0.05669612f
};

// dense_hidden weights (6x24)
static const float HIDDEN_WEIGHTS[] = {
    -0.18054876f,    0.55501074f,    0.26880863f,    0.06687693f,
    0.22523348f,    -0.71328443f,    0.26329747f,    0.37126592f,
    0.29888618f,    0.27802336f,    0.45426714f,    0.57427198f,
    -0.34281415f,    -0.66729951f,    -0.25137863f,    -0.59876132f,
    -0.01972337f,    -0.11586641f,    0.41122648f,    -0.26086193f,
    0.39010224f,    0.36252049f,    0.52615541f,    0.16722809f,
    -0.15065487f,    0.34230548f,    0.13142328f,    -0.15712839f,
    -0.04116821f,    -0.17262979f,    0.29416451f,    -0.51434952f,
    0.71683294f,    -0.52302885f,    -1.05779123f,    -0.16324186f,
    -1.31376326f,    -0.48335826f,    1.16600442f,    -0.79641056f,
    0.51808155f,    -0.41279367f,    -0.12225880f,    -0.45126525f,
    -0.02828911f,    -1.34957492f,    -1.25634718f,    0.30731264f,
    -0.01661593f,    -0.33976322f,    -0.68295819f,    -0.31092095f,
    -0.43243417f,    -0.10121307f,    0.29754159f,    0.73881304f,
    -0.46060991f,    0.53543603f,    0.14227621f,    -0.15696445f,
    0.70252550f,    0.15291110f,    0.02194591f,    0.49481639f,
    -0.39859879f,    -0.23140094f,    0.10836291f,    0.56904650f,
    0.38294816f,    -0.34475586f,    0.50616002f,    -0.42056802f,
    -0.13269673f,    -0.03773475f,    0.03310670f,    0.14605643f,
    -0.57393736f,    -0.04911405f,    0.12630320f,    0.50612742f,
    0.31736615f,    0.98000371f,    0.07391232f,    0.63795435f,
    0.38506934f,    0.46980831f,    0.07477839f,    0.41239449f,
    -0.19388266f,    0.04576477f,    0.51012427f,    0.81897849f,
    0.89836007f,    0.10489307f,    0.94925642f,    0.67218339f,
    0.01783921f,    -0.07827310f,    -0.59425730f,    0.24253902f,
    -0.31123149f,    0.23077695f,    -0.30643064f,    0.22610436f,
    0.66938591f,    0.60162336f,    -0.59970695f,    0.29798040f,
    0.11550916f,    0.74418235f,    0.56211138f,    0.27434185f,
    0.70705950f,    0.14625561f,    0.08579848f,    0.16457933f,
    -0.00088545f,    -0.27939984f,    0.38672003f,    -0.40886393f,
    0.39612690f,    0.52621770f,    0.52177101f,    0.15035443f,
    -0.33710524f,    -0.35206938f,    -0.22822258f,    0.35893080f,
    -0.19001907f,    -0.09368161f,    -0.39779431f,    0.66312224f,
    -0.11366294f,    -0.26613033f,    0.03871537f,    -0.23943727f,
    0.06011801f,    -0.08618958f,    0.72894770f,    0.30512482f,
    0.38731939f,    -0.31704527f,    0.40896729f,    0.93612432f

};

// dense_hidden bias (24)
static const float HIDDEN_BIAS[] = {
    -0.02954560f,    -0.09867294f,    -0.14461920f,    -0.03886725f,
    -0.12791744f,    -0.11508240f,    -0.06666568f,    -0.04651816f,
    0.02447022f,    -0.07180414f,    -0.00313734f,    -0.12460160f,
    -0.09637804f,    -0.04607033f,    -0.00201795f,    -0.15552510f,
    -0.04030227f,    -0.06005635f,    -0.11272262f,    -0.03979000f,
    -0.14540820f,    0.03786762f,    -0.10796906f,    -0.09297213f

};

// dense_output weights (24x3)
static const float OUTPUT_WEIGHTS[] = {
    -0.24499868f,    0.22617136f,    0.09845150f,    0.39304864f,
    -0.21574505f,    -0.12982491f,    0.72718805f,    -0.56002927f,
    -0.18491706f,    0.00256517f,    0.14534459f,    0.34644261f,
    0.49244711f,    0.11809915f,    -0.61396033f,    -0.38565025f,
    0.55523396f,    -0.19772494f,    0.21114057f,    0.34396130f,
    -0.27362922f,    -0.37114891f,    0.11061973f,    0.12816896f,
    0.60774183f,    -0.24481402f,    -0.37547898f,    -0.73441494f,
    -0.10620584f,    0.39731055f,    1.19064844f,    0.50484902f,
    -1.51279867f,    0.12030525f,    -0.21427962f,    1.05211353f,
    -0.28318074f,    0.61688387f,    -0.59146440f,    0.35883334f,
    -0.49926105f,    0.15549956f,    0.69056165f,    0.18897915f,
    -0.84718865f,    -0.51981252f,    0.27948254f,    0.41302401f,
    -0.99957681f,    -0.03900942f,    1.01869297f,    0.19804257f,
    -0.06639448f,    0.26959059f,    -0.30209246f,    -0.94850981f,
    0.30899557f,    -0.02823186f,    0.29947409f,    0.39653835f,
    0.31839925f,    -0.92312908f,    0.33883980f,    -0.89594561f,
    -0.62604070f,    1.48311973f,    1.04364717f,    -0.27296749f,
    -0.60847521f,    -0.56910104f,    0.76738340f,    -0.29137206f

};

// dense_output bias (3)
static const float OUTPUT_BIAS[] = {
    -0.02599154f,    0.00941601f,    0.01619756f
};

// Neural Network Functions
void nn_forward(const float* input, float* output);
float nn_relu(float x);

#endif // NN_WEIGHTS_H
